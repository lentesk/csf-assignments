1.

Pros: Linked lists use less memory, can grow to bigger sizes
Cons: Inefficient accessibility due to nodes existing in different places within the memory

2. Linked lists are like trains, where each cards are linked in a certain order and one car points to the next.

Programming Questions
1.

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current node to head
    WHILE current node is not null AND current < node
   SET current.next to node
 }
}

2.

var list = {

  }
  var node = {
    head: null,
    tail: null,
    addToHead: function(node) {
      this.head = node;
    },
    addToTail: function(node) {
      this.tail = node;
    },
    findByValue: function(searching_value) {
      if (this.head === searching_value) {
        this.head;
      } else {
        false;
      }
    },
      removeDupe: function() {
      var currentNode = this.head;
       if (this.head == null) {
        console.log('No duplicates or single item in list')
       }
            return;
 
         while (this.currentNode != null) {

            if (this.currentNode == this.currentNode.next) {
                let nextNext = currentNode.next.next;
                currentNode.next = null;
                currentNode.next = nextNext;
            } else {
               current = currentNode.next;
            }
        }

       }
  };

  
  node.addToHead(3);
  node.addToTail(3);
  node.addToHead(5);
  node.removeDupes();

3.

function LinkedList() {
  this.head = null;
  this.tail = null;

  function Node(value, next, prev) {
  this.value = value;
  this.next = next;
  this.prev = prev;
}

LinkedList.prototype.addToHead = function(value) {
  const newNode = new Node(value, this.head, null);
  if (this.head) this.head.prev = newNode;
  else this.tail = newNode;
  this.head = newNode;
};


var reverseLinkedList = function(linkedlist) {
  var node = linkedlist;
  var previous = null;

  while(node) {
    var save = node.next;
    node.next = previous;
    previous = node;
    node = save;
  }
  return previous; 
}
linkedlist = reverseLinkedList(linkedlist);
