1.

Pros: Linked lists use less memory, can grow to bigger sizes
Cons: Inefficient accessibility due to nodes existing in different places within the memory

2. Linked lists are like trains, where each cards are linked in a certain order and one car points to the next.

Programming Questions
1.

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current node to head
    WHILE current node is not null AND current < node
   SET current.next to node
 }


2.


function LinkedList () {
    this.head = null;
}

LinkedList.prototype.addToHead = function (value) {
    var node = {
        data: value,
        next:null
    };

    if (!this.head) {
        this.head = node;
    } else {
        var currentNode = this.head;
        while (currentNode.next) {
            currentNode = currentNode.next;
        }
        currentNode.next = node;
    }
};

LinkedList.prototype.removeDuplicates = function () {
    if (!this.head || !this.head.next) {
      console.log('No duplicates found');
      return;
    }

    var currentNode;
    var nextNode;
    var nodes = {};

    currentNode = this.head;
    nextNode = currentNode.next;
    nodes[currentNode.data] = true;

    while (nextNode) {
        var data = nextNode.data;
        if (nodes[data]) {
            currentNode.next = nextNode.next;
        } else {
            nodes[data] = true;
            currentNode = nextNode;
        }

        nextNode = nextNode.next;
    }
};

var list = new LinkedList();
list.addToHead('a');
list.addToHead('c');
list.addToHead('d');
list.addToHead('d');
list.addToHead('a');
list.removeDuplicates();
console.log(list);


3.

function LinkedList() {
  this.head = null;
  this.tail = null;
}
  function Node(value, next, prev) {
  this.value = value;
  this.next = next;
  this.prev = prev;
}

LinkedList.prototype.addToHead = function(value) {
  const newNode = new Node(value, this.head, null);
  if (this.head) this.head.prev = newNode;
  else this.tail = newNode; 
  this.head = newNode;
};

LinkedList.prototype.reverse = function(){
  currentNode = this.head;
  nextNode = currentNode.next;

while(nextNode) {
  var temp = nextNode.next;
  nextNode.next = currentNode;
  currentNode = nextNode;
  nextNode = temp;
}

this.head.next = null;
this.head = currentNode;
};

const list = new LinkedList();
list.addToHead("a");
list.addToHead("b");
list.addToHead("c");
list.addToHead("d");
list.reverse();
console.log(list);
